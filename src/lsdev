#!/usr/bin/python
#
# -*- coding: utf-8 -*-
# Copyright (C) 2015  Red Hat, Inc.
#
# This copyrighted material is made available to anyone wishing to use,
# modify, copy, or redistribute it subject to the terms and conditions of
# the GNU General Public License v.2, or (at your option) any later version.
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY expressed or implied, including the implied warranties of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.  You should have received a copy of the
# GNU General Public License along with this program; if not, write to the
# Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.  Any Red Hat trademarks that are incorporated in the
# source code or documentation are not subject to the GNU General Public
# License and may only be used or replicated with the express permission of
# Red Hat, Inc.
#
# Red Hat Author(s): Anne Mulhern <amulhern@redhat.com>

"""
    lsdev
    =====

    Python script for working with graphs of relationships between devices.

    .. moduleauthor::  Anne Mulhern  <amulhern@redhat.com>
"""

import argparse
import sys

import pyudev

import pyblk

_ACTIONS = ['print', 'write']

def get_parser():
    """
    Generate an appropriate parser.

    :returns: an argument parser
    :rtype: `ArgumentParser`
    """
    parser = argparse.ArgumentParser()
    parser.add_argument(
       "--action",
       choices=_ACTIONS,
       default="print",
       help="action to perform"
    )
    parser.add_argument(
       "--inverse",
       action="store_true",
       help="show devices in the inverse direction"
    )
    parser.add_argument(
       "--filename",
       help="where to put output, if none specified output is to standard out"
    )
    parser.add_argument(
       "--name",
       default="graph",
       help="a name for the graph"
    )
    return parser

def do_action(graph, action, out):
    """
    Do the action.

    :param `DiGraph` graph: the graph
    :param str action: the action to perform
    :param file out: output stream for results
    """
    assert action in _ACTIONS

    if action == "print":
        pyblk.PrintGraph.print_graph(out, graph)
    elif action == "write":
        pyblk.Writer.write(graph, out)
    else:
        assert False

def main():
    """
    The main method for listing device graphs.
    """
    args = get_parser().parse_args()

    context = pyudev.Context()
    graph = pyblk.GenerateGraph.get_graph(context, args.name)
    pyblk.GenerateGraph.decorate_graph(context, graph)

    if not args.inverse:
        graph = graph.reverse(copy=False)

    if not args.filename:
        do_action(graph, args.action, sys.stdout)
    else:
        with open(args.filename, "w") as out:
            do_action(graph, args.action, out)

    return 0

if __name__ == "__main__":
    sys.exit(main())
